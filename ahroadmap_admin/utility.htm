<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script type="text/javascript" src="js/gitana.min.js"></script>
    
    
    <script>
var username = "roadmapadmin";
var password = "aonhewitt1";

var clientKey = "9a44be0f-c2f8-4454-8bd1-fd68503a5a9d";
var clientSecret = "O85O6EPbBuxrkmyrriQfw0eHAkS5je6PHwvT967+T8mWTB9z1eonabtgM3MovhywFas0FNWGhWqW1FE2vtfT0C/M97OqfTf87poOM5IvsLc=";


var repositoryId = '254893db0c304ba3295d';
var branchId = '1c6332c3a1eeafbfb3a2';
var platform;
var repository;
var branch;
var newCommentId;
var counter = 0;
var nodes = [];
var allPortfolioObjects = [];
var allPlatformObjects = [];
var allReleaseObjects = [];
var allFeatureObjects = [];
var activeParentId;


platform = Gitana.connect({
    "clientKey": clientKey,
    "clientSecret": clientSecret,
    "username": username,
    "password": password,
    "baseURL": "https://api.cloudcms.com"

}).then(function () {




    repository = platform.readRepository(repositoryId).then(function () {

        branch = repository.readBranch(branchId).then(function () {

            var query = {
                "content": 'true'
            };
            var pagination = {

                "sort": {
                    "date": 1
                },
                "limit": 9999
            };

            branch.queryNodes(query, pagination).each(function () {

                //build arrays of similar type objects. this will be used in 'populateuniversaliobject()'
                nodes[counter] = this;
                if (nodes[counter].type == 'portfolio') {
                    allPortfolioObjects.push(this);
                    //add a property array to each object to hold its children. 
                    allPortfolioObjects[(allPortfolioObjects.length - 1)].platforms = []; //give the portfolio object a property called platforms which is an array to hold its child platforms
                    allPortfolioObjects[(allPortfolioObjects.length - 1)].idName = allPortfolioObjects[(allPortfolioObjects.length - 1)].name.replace(/\s+/g, '');
                } else if (nodes[counter].type == 'platform') {
                    allPlatformObjects.push(this);
                    allPlatformObjects[(allPlatformObjects.length - 1)].releases = [];
                    allPlatformObjects[(allPlatformObjects.length - 1)].idName = allPlatformObjects[(allPlatformObjects.length - 1)].name.replace(/\s+/g, '');
                } else if (nodes[counter].type == 'release') {
                    allReleaseObjects.push(this);
                    allReleaseObjects[(allReleaseObjects.length - 1)].features = [];
                    allReleaseObjects[(allReleaseObjects.length - 1)].idName = allReleaseObjects[(allReleaseObjects.length - 1)].name.replace(/\s+/g, '');
                } else if (nodes[counter].type == 'feature') {
                    allFeatureObjects.push(this);
                    allFeatureObjects[(allFeatureObjects.length - 1)].idName = allFeatureObjects[(allFeatureObjects.length - 1)].name.replace(/\s+/g, '');

                }; //} else if (nodes[counter].type == 'feature') {
                counter = counter + 1;
            }) //allObjects = branch.queryNodes(query, pagination).each(function () {
				.then(function () {
				    alert("populating object now");
				    populateUniversalObject(function () {
				        alert("complete");
				    })

				});
        });
    });
});


function populateUniversalObject(callback) {
    var rows = "";
    // now build the tree structure for the objects.
    //add features to their parent releases
    
    for (j = 0; j < allReleaseObjects.length; j++) {
        for (i = 0; i < allFeatureObjects.length; i++) {
            if (allFeatureObjects[i].parent == allReleaseObjects[j].name) {
                allReleaseObjects[j].features.push(allFeatureObjects[i]);            
                allFeatureObjects[i].parentId = allReleaseObjects[j]._doc;
                console.log("updating");
                allFeatureObjects[i].update();                         
            };
        };
    };
    
  
    for (j = 0; j < allPlatformObjects.length; j++) {
        for (i = 0; i < allReleaseObjects.length; i++) {
            if (allReleaseObjects[i].parent == allPlatformObjects[j].name) {
                allPlatformObjects[j].releases.push(allReleaseObjects[i]);
                allReleaseObjects[i].parentId = allPlatformObjects[j]._doc;
                console.log("updating");
                allReleaseObjects[i].update();
            };
        };
    };
    


    for (j = 0; j < allPortfolioObjects.length; j++) {
        for (i = 0; i < allPlatformObjects.length; i++) {
            if (allPlatformObjects[i].parent == allPortfolioObjects[j].name) {
                allPortfolioObjects[j].platforms.push(allPlatformObjects[i]);
                allPlatformObjects[i].parentId = allPortfolioObjects[j]._doc;
                console.log("updating");
                allPlatformObjects[i].update();
               };
        };
    };

    
    callback && callback();
};

</script>
</head>
<body>

</body>
</html>
